// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// ユーザー
type Customer struct {
	// ID
	ID string `json:"id"`
	// 名前
	Name string `json:"name"`
	// 年齢
	Age int `json:"age"`
	// Todo
	Todos []*Todo `json:"todos"`
}

func (Customer) IsNode() {}

// ページングを伴う結果返却用
type CustomerConnection struct {
	// ページ情報
	PageInfo *PageInfo `json:"pageInfo"`
	// 検索結果一覧（※カーソル情報を含む）
	Edges []*CustomerEdge `json:"edges"`
	// 検索結果の全件数
	TotalCount int `json:"totalCount"`
}

func (CustomerConnection) IsConnection() {}

// 検索結果一覧（※カーソル情報を含む）
type CustomerEdge struct {
	Node   *Customer `json:"node"`
	Cursor string    `json:"cursor"`
}

func (CustomerEdge) IsEdge() {}

// ユーザー並べ替えキー
type CustomerOrderKey string

const (
	// ID
	CustomerOrderKeyID CustomerOrderKey = "ID"
	// ユーザー名
	CustomerOrderKeyName CustomerOrderKey = "NAME"
)

var AllCustomerOrderKey = []CustomerOrderKey{
	CustomerOrderKeyID,
	CustomerOrderKeyName,
}

func (e CustomerOrderKey) IsValid() bool {
	switch e {
	case CustomerOrderKeyID, CustomerOrderKeyName:
		return true
	}
	return false
}

func (e CustomerOrderKey) String() string {
	return string(e)
}

func (e *CustomerOrderKey) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CustomerOrderKey(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CustomerOrderKey", str)
	}
	return nil
}

func (e CustomerOrderKey) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
